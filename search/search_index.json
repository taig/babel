{"docs":[{"location":"paradox.json","text":"","title":""},{"location":"index.html","text":"","title":"Babel"},{"location":"index.html#babel","text":"Internationalization (i18n) for Scala applications","title":"Babel"},{"location":"index.html#features","text":"First class support for plurals Great fit for Scala.js clients, since java.util.Locale is not used Translation definitions in HOCON format Decode translations into data classes Easily share translations of a specific language with the frontend in JSON format Typesafe alternative to String.format or java.util.MessageFormat argument injection Dependency-free core module","title":"Features"},{"location":"installation.html","text":"","title":"Installation"},{"location":"installation.html#installation","text":"Dependency-free core module, that contains all data class definitions, type classes and pre-defined locales\n\"io.taig\" %%% \"babel-core\" % \"0.5.3\"\nCats type class instances\n\"io.taig\" %%% \"babel-cats\" % \"0.5.3\"\nSerialization formats\n\"io.taig\" %%% \"babel-circe\" % \"0.5.3\"\nReading HOCON translation definitions from resources\n\"io.taig\" %%% \"babel-loader\" % \"0.5.3\"\nCodecs to populate custom data classes from translation objects\n\"io.taig\" %%% \"babel-generic\" % \"0.5.3\"\nDefault setup which is assumed in the documentation below\n\"io.taig\" %%% \"babel-circe\" % \"0.5.3\"\n\"io.taig\" %%% \"babel-generic\" % \"0.5.3\"\n\"io.taig\" %%% \"babel-loader\" % \"0.5.3\"","title":"Installation"},{"location":"guide.html","text":"","title":"Guide"},{"location":"guide.html#guide","text":"Loading translations Defining translations in HOCON files Loading translations into a Babel Decoding the Babel into a data class Argument passing Compile-time guarantees Plurals Using plurals with arguments Plural ranges","title":"Guide"},{"location":"guide-loading.html","text":"","title":"Loading translations"},{"location":"guide-loading.html#loading-translations","text":"","title":"Loading translations"},{"location":"guide-loading.html#defining-translations-in-hocon-files","text":"For each language a separate file must be created in the resources folder and the name of the Locale as filename. It is recommended to create a subdirectory for your language files, in the examples below we picked babel.\nen.conf copysourcegreeting = \"Good afternoon\" de.conf copysourcegreeting = \"Guten Tag\" de-AT.conf copysourcegreeting = \"Grüß Gott\"","title":"Defining translations in HOCON files"},{"location":"guide-loading.html#loading-translations-into-a-babel","text":"import cats.effect._\nimport cats.effect.unsafe.implicits.global\nimport io.taig.babel._\n\nval babels = Loader.default[IO]\n  .load(\"babel\", Set(Locales.en, Locales.de, Locales.de_AT))\n  .unsafeRunSync()\n// babels: Translations[Babel] = Translations(Map(en -> Object(Map(greeting -> Value(Good afternoon))), de -> Object(Map(greeting -> Value(Guten Tag))), de-AT -> Object(Map(greeting -> Value(Grüß Gott)))))","title":"Loading translations into a Babel"},{"location":"guide-loading.html#decoding-the-babel-into-a-data-class","text":"import cats.syntax.all._\nimport io.taig.babel.generic.auto._\n\nfinal case class I18n(greeting: String)\n\nobject I18n {\n  implicit val decoder: Decoder[I18n] = deriveDecoder[I18n]\n}\n\nval i18ns = IO.fromEither(Decoder[I18n].decodeAll(babels))\n  .map(_.withFallback(Locales.en))\n  .flatMap(_.liftTo[IO](new IllegalStateException(\"Translations for en missing\")))\n  .unsafeRunSync()\n// i18ns: NonEmptyTranslations[I18n] = NonEmptyTranslations(en -> I18n(Good afternoon),Translations(Map(de -> I18n(Guten Tag), de-AT -> I18n(Grüß Gott))))\ni18ns(Locales.de).greeting\n// res0: String = \"Guten Tag\"\ni18ns(Locales.de_AT).greeting\n// res1: String = \"Grüß Gott\"\ni18ns(Locales.de_CH).greeting\n// res2: String = \"Guten Tag\"\ni18ns(Locales.fr).greeting\n// res3: String = \"Good afternoon\"","title":"Decoding the Babel into a data class"},{"location":"guide-arguments.html","text":"","title":"Argument passing"},{"location":"guide-arguments.html#argument-passing","text":"Babel has helpers like StringFormat1, StringFormat2, …, StringFormat22. to help you inject arguments into Strings. In that regard it is similar to java.lang.String.format or java.text.MessageFormat.format but provides better compile time checks.\nBabel’s StringFormat does not automatically render arbitrary types (as String.format does for numeric values). It only accepts String values, so the caller is responsible for converting the value to a renderable format beforehand.\nParameter placeholders are encoded in the style of java.text.MessageFormat, starting at index 0 (e.g. {0}, {1}, …) Each placeholder index may be used at most once (e.g. \"lorem {0} dolar {0}\" is not allowed) The order of the placeholders may vary across translations (e.g. \"The {0} {1} is fast\" and \"El {1} {0} es rapido\") There can not be more placeholders than arguments (e.g. StringFormat1 can not be decoded when there is {0} and {1} as there is only 1 parameter) It is a decoding error to define placeholder indices that exceed the StringFormatN arity (e.g. StringFormat2 may only use {0} and {1}, but not {2}) Not all placeholders must be used (e.g. \"Good afternoon, {0}. Today it's {1} degrees.\" and \"Guten Tag, sehr geehrte Damen und Herren. Heute sind es {1} Grad.\")\nen.conf copysourceweather = \"The temperature in {0} is {1} degrees Celsius.\" de.conf copysourceweather = \"Es sind {1} Grad Celsius in {0}.\"\nNote In the German version, the parameters are called in swapped order.\nimport cats.effect._\nimport cats.effect.unsafe.implicits.global\nimport cats.syntax.all._\nimport io.taig.babel._\nimport io.taig.babel.generic.auto._\n\nfinal case class I18n(weather: StringFormat2)\n\nval i18ns = Loader\n  .default[IO]\n  .load(\"arguments\", Set(Locales.en, Locales.de))\n  .map(Decoder[I18n].decodeAll)\n  .rethrow\n  .map(_.withFallback(Locales.en))\n  .flatMap(_.liftTo[IO](new IllegalStateException(\"Translations for en missing\")))\n  .unsafeRunSync()\n// i18ns: NonEmptyTranslations[I18n] = NonEmptyTranslations(en -> I18n(The temperature in {0} is {1} degrees Celsius.),Translations(Map(de -> I18n(Es sind {1} Grad Celsius in {0}.))))\ni18ns(Locales.en).weather(\"Cape Town\", \"26\")\n// res0: String = \"The temperature in Cape Town is 26 degrees Celsius.\"\ni18ns(Locales.de).weather(\"Frankfurt am Main\", \"18\")\n// res1: String = \"Es sind 18 Grad Celsius in Frankfurt am Main.\"","title":"Argument passing"},{"location":"guide-arguments.html#compile-time-guarantees","text":"In the above example we have used StringFormat2, which means that exactly 2 arguments must be passed. Otherwise a compile error will occur.\ni18ns(Locales.en).weather(\"Stockholm\")\n// error: \n// missing argument for parameter v1 of method apply in class StringFormat2: (v0: String, v1: String): String\nHowever, it is allowed to omit parameters.\nDecoder[StringFormat2]\n  .decode(Babel.text(\"It's always rainy in {0}\"))\n  .map(_.apply(\"London\", \"3\"))\n// res3: Either[Error, String] = Right(value = \"It's always rainy in London\")","title":"Compile-time guarantees"},{"location":"guide-plurals.html","text":"","title":"Plurals"},{"location":"guide-plurals.html#plurals","text":"Babel provides first class support for plurals with the Quantities class.\nen.conf copysourcebicycles = {\n  0 = \"There are no bicycles in Beijing\"\n  1 = \"There is one bicycle in Beijing\"\n  \"*\" = \"There are 9 million bicycles in Beijing\"\n}\nimport cats.effect._\nimport cats.effect.unsafe.implicits.global\nimport cats.syntax.all._\nimport io.taig.babel._\nimport io.taig.babel.generic.auto._\n\nfinal case class I18n(bicycles: Quantities[String])\n\nval i18n = Loader\n  .default[IO]\n  .load(\"plurals\", Set(Locales.en))\n  .map(Decoder[I18n].decodeAll)\n  .rethrow\n  .map(_.withFallback(Locales.en))\n  .flatMap(_.liftTo[IO](new IllegalStateException(\"Translations for en missing\")))\n  .map(_.apply(Locales.en))\n  .unsafeRunSync()\n// i18n: I18n = I18n(\n//   bicycles = Quantities(\n//     default = \"There are 9 million bicycles in Beijing\",\n//     quantities = List(\n//       Element(\n//         quantity = Exact(value = 0),\n//         value = \"There are no bicycles in Beijing\"\n//       ),\n//       Element(\n//         quantity = Exact(value = 1),\n//         value = \"There is one bicycle in Beijing\"\n//       )\n//     )\n//   )\n// )\ni18n.bicycles(0)\n// res0: String = \"There are no bicycles in Beijing\"\ni18n.bicycles(1)\n// res1: String = \"There is one bicycle in Beijing\"\ni18n.bicycles(100)\n// res2: String = \"There are 9 million bicycles in Beijing\"","title":"Plurals"},{"location":"guide-plurals.html#using-plurals-with-arguments","text":"Of course, you will most likely want to reference the given quantity in your translations, which was painfully omitted in the example above. This can be achieved by combining the StringFormat feature with Quantities.\nen.conf copysourcebicycles = {\n  0 = \"There are no bicycles in Beijing\"\n  1 = \"There is one bicycle in Beijing\"\n  \"*\" = \"There are {0} bicycles in Beijing\"\n}\nimport cats.effect._\nimport cats.effect.unsafe.implicits.global\nimport cats.syntax.all._\nimport io.taig.babel._\nimport io.taig.babel.generic.auto._\n\nfinal case class I18n(bicycles: Quantities[StringFormat1])\n\nval i18n = Loader\n  .default[IO]\n  .load(\"plurals-arguments\", Set(Locales.en))\n  .map(Decoder[I18n].decodeAll)\n  .rethrow\n  .map(_.withFallback(Locales.en))\n  .flatMap(_.liftTo[IO](new IllegalStateException(\"Translations for en missing\")))\n  .map(_.apply(Locales.en))\n  .unsafeRunSync()\n// i18n: I18n = I18n({0: \"There are no bicycles in Beijing\", 1: \"There is one bicycle in Beijing\", *: \"There are {0} bicycles in Beijing\"})\ni18n.bicycles(0)\n// res4: StringFormat1 = There are no bicycles in Beijing\ni18n.bicycles(100)(\"100\")\n// res5: String = \"There are 100 bicycles in Beijing\"\ni18n.bicycles(9000000)(\"9 million\")\n// res6: String = \"There are 9 million bicycles in Beijing\"","title":"Using plurals with arguments"},{"location":"guide-plurals.html#plural-ranges","text":"Some languages have very complex plural rules. These can be mapped with quantity ranges.\nen.conf copysourceranges = {\n  1 = \"Exact\"\n  \"10-20\" = \"Range 10 to 20\"\n  \"*\" = \"Fallback\"\n}\nimport cats.effect._\nimport cats.effect.unsafe.implicits.global\nimport cats.syntax.all._\nimport io.taig.babel._\nimport io.taig.babel.generic.auto._\n\nfinal case class I18n(ranges: Quantities[String])\n\nval i18n = Loader\n  .default[IO]\n  .load(\"plurals-ranges\", Set(Locales.en))\n  .map(Decoder[I18n].decodeAll)\n  .rethrow\n  .map(_.withFallback(Locales.en))\n  .flatMap(_.liftTo[IO](new IllegalStateException(\"Translations for en missing\")))\n  .map(_.apply(Locales.en))\n  .unsafeRunSync()\n// i18n: I18n = I18n({1: \"Exact\", 10-20: \"Range 10 to 20\", *: \"Fallback\"})\ni18n.ranges(0)\n// res8: String = \"Fallback\"\ni18n.ranges(1)\n// res9: String = \"Exact\"\ni18n.ranges(9)\n// res10: String = \"Fallback\"\ni18n.ranges(10)\n// res11: String = \"Range 10 to 20\"\ni18n.ranges(11)\n// res12: String = \"Range 10 to 20\"\ni18n.ranges(20)\n// res13: String = \"Range 10 to 20\"\ni18n.ranges(21)\n// res14: String = \"Fallback\"","title":"Plural ranges"},{"location":"sample.html","text":"","title":"Sample application"},{"location":"sample.html#sample-application","text":"Take a look at the client / server sample application that aims to showcase the library’s features.\n> sbt sampleBackend/run","title":"Sample application"},{"location":"cookbook.html","text":"","title":"Cookbook"},{"location":"cookbook.html#cookbook","text":"","title":"Cookbook"},{"location":"cookbook.html#resolve-the-preferred-language-from-the-accept-language-header-in-an-http4s-middleware","text":"Uses Java’s Locale.LanguageRange.parse to lift the Accept-Language header value into an ordered list of java.util.Locales and aligns it with the Locales that are supported by the application.\nimport java.util.{Locale => JavaLocale}\n\nimport scala.jdk.CollectionConverters._\n\nimport cats.Monad\nimport io.taig.babel.Locale\nimport org.http4s.HttpRoutes\nimport org.http4s.headers.`Accept-Language`\nimport org.http4s.implicits._\n\nfinal class LocalesMiddleware[F[_]: Monad](locales: Set[Locale], fallback: Locale) {\n  def apply(routes: Locale => HttpRoutes[F]): HttpRoutes[F] =\n    HttpRoutes[F] { request =>\n      val locale = request.headers\n        .get[`Accept-Language`]\n        .map(_.value)\n        .flatMap { value =>\n          JavaLocale.LanguageRange\n            .parse(value)\n            .asScala\n            .sortWith(_.getWeight > _.getWeight)\n            .map(language => JavaLocale.forLanguageTag(language.getRange))\n            .flatMap(Locale.fromJavaLocale)\n            .find(locales.contains)\n        }\n        .getOrElse(fallback)\n\n      routes(locale).run(request)\n    }\n}","title":"Resolve the preferred language from the Accept-Language header in an http4s middleware"},{"location":"cookbook.html#working-with-adts","text":"Add simple helper methods to your data classes to make them easier to use. This works especially well for ADT lookups.\nimport cats.effect._\nimport cats.effect.unsafe.implicits.global\nimport cats.syntax.all._\nimport io.taig.babel._\nimport io.taig.babel.generic.auto._\n\nsealed abstract class Country extends Product with Serializable\n\nobject Country {\n  case object France extends Country\n  case object Italy extends Country\n}\n\nfinal case class CountryI18n(france: String, italy: String) {\n  def apply(country: Country): String = country match {\n    case Country.France => france\n    case Country.Italy => italy\n  }\n}\n\nfinal case class I18n(country: CountryI18n)\n\nval i18ns = Loader\n  .default[IO]\n  .load(\"cookbook-country\", Set(Locales.en, Locales.de))\n  .map(Decoder[I18n].decodeAll)\n  .rethrow\n  .map(_.withFallback(Locales.en))\n  .flatMap(_.liftTo[IO](new IllegalStateException(\"Translations for en missing\")))\n  .unsafeRunSync()\n// i18ns: NonEmptyTranslations[I18n] = NonEmptyTranslations(en -> I18n(CountryI18n(France,Italy)),Translations(Map(de -> I18n(CountryI18n(Frankreich,Italien)))))\ni18ns(Locales.en).country(Country.Italy)\n// res0: String = \"Italy\"\ni18ns(Locales.de).country(Country.France)\n// res1: String = \"Frankreich\"","title":"Working with ADTs"},{"location":"changelog.html","text":"","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#0-5-3","text":"2024-10-09\nApply paradox material theme to documentation Upgrade to https 1.0.0-M42 Upgrade to munit 1.0.2 Upgrade to sbt 1.10.2 Upgrade to sbt-ci-release 1.7.0 Upgrade to sbt-houserules 0.9.0 Upgrade CI dependencies Update cats-core, cats-laws to 2.10.0 (#296) Update cats-core, cats-laws to 2.12.0 (#345) Update cats-effect, cats-effect-kernel to 3.5.2 (#308) Update cats-effect, cats-effect-kernel to 3.5.3 (#320) Update cats-effect, cats-effect-kernel to 3.5.4 (#329) Update circe-parser to 0.14.10 (#358) Update circe-parser to 0.14.6 (#298) Update circe-parser to 0.14.7 (#336) Update circe-parser to 0.14.8 (#346) Update circe-parser to 0.14.9 (#348) Update http4s-dsl, http4s-ember-server to 1.0.0-M41 (#330) Update log4cats-slf4j to 2.7.0 (#338) Update mdoc, sbt-mdoc to 2.3.8 (#309) Update mdoc, sbt-mdoc to 2.4.0 (#310) Update mdoc, sbt-mdoc to 2.5.0 (#312) Update mdoc, sbt-mdoc to 2.5.1 (#313) Update mdoc, sbt-mdoc to 2.5.2 (#318) Update mdoc, sbt-mdoc to 2.5.3 (#347) Update mdoc, sbt-mdoc to 2.5.4 (#351) Update mdoc, sbt-mdoc to 2.6.0 (#361) Update mdoc, sbt-mdoc to 2.6.1 (#362) Update paradox-theme-generic, sbt-paradox to 0.10.6 (#322) Update paradox-theme-generic, sbt-paradox to 0.10.7 (#333) Update sbt to 1.9.4 (#297) Update sbt to 1.9.6 (#304) Update sbt to 1.9.7 (#311) Update sbt to 1.9.8 (#317) Update sbt to 1.9.9 (#325) Update sbt-ci-release to 1.6.0 (#352) Update sbt-ci-release to 1.6.1 (#356) Update sbt-houserules to 0.7.2 (#295) Update sbt-houserules to 0.7.4 (#300) Update sbt-houserules to 0.7.5 (#323) Update sbt-houserules to 0.7.6 (#328) Update sbt-houserules to 0.7.7 (#349) Update sbt-houserules to 0.8.1 (#364) Update sbt-scalajs, scalajs-compiler, … to 1.14.0 (#306) Update sbt-scalajs, scalajs-compiler, … to 1.15.0 (#316) Update sbt-scalajs, scalajs-compiler, … to 1.16.0 (#331) Update sbt-scalajs, scalajs-compiler, … to 1.17.0 (#365) Update sbt-web-scalajs to 1.3.0 (#314) Update scala-library to 2.13.12 (#302) Update scala-library to 2.13.13 (#326) Update scala-library to 2.13.15 (#363) Update scala3-library, … to 3.3.1 (#301) Update scala3-library, … to 3.3.3 (#327) Update scalajs-dom to 2.7.0 (#305) Update scalajs-dom to 2.8.0 (#307) Update sconfig to 1.5.1 (#303) Update sconfig to 1.6.0 (#315) Update sconfig to 1.7.0 (#335) Update shapeless to 2.3.11 (#340) Update shapeless to 2.3.12 (#341) Update slf4j-simple to 2.0.11 (#319) Update slf4j-simple to 2.0.12 (#324) Update slf4j-simple to 2.0.13 (#334) Update slf4j-simple to 2.0.16 (#354) Update slf4j-simple to 2.0.9 (#299)","title":"0.5.3"},{"location":"changelog.html#0-5-2","text":"2023-07-25\nRelax GitHub Actions dependency versions Remove outdated libraryDependencySchemes Fix JamesIves/github-pages-deploy-action version Upgrade to http4s 1.0.0-M40 Upgrade to java 17 Upgrade to sbt-houserules 0.7.1 Upgrade to scala 3.3.0 Update cats-core, cats-laws to 2.9.0 (#245) Update cats-effect, cats-effect-kernel to 3.5.1 (#288) Update circe-parser to 0.14.5 (#269) Update mdoc, sbt-mdoc to 2.3.7 (#261) Update paradox-theme-generic, sbt-paradox to 0.10.5 (#292) Update sbt to 1.9.3 (#294) Update sbt-ci-release to 1.5.12 (#277) Update sbt-revolver to 0.10.0 (#272) Update sbt-scalajs, scalajs-compiler, … to 1.13.2 (#286) Update sbt-scalajs-crossproject to 1.3.2 (#289) Update scala-library to 2.13.11 (#285) Update scalajs-dom to 2.6.0 (#278) Update slf4j-simple to 2.0.7 (#270)","title":"0.5.2"},{"location":"changelog.html#0-5-1","text":"2022-10-11\nOnly deploy documentation on release Update cats-core, cats-laws to 2.8.0 (#222) Update cats-effect, cats-effect-kernel to 3.3.14 (#226) Update mdoc, sbt-mdoc to 2.3.3 (#229) Update paradox-theme-generic, sbt-paradox to 0.10.2 (#218) Update sbt-scalajs-crossproject to 1.2.0 (#204) Update scala3-library, … to 3.2.0 (#236) Update scalajs-dom to 2.3.0 (#235) Update shapeless to 2.3.10 (#237) Upgrade to JamesIves/github-pages-deploy-action@4.4.0 Upgrade to actions/checkout@v3.1.0 Upgrade to actions/download-artifact@v3.0.0 Upgrade to actions/setup-java@v3.5.1 Upgrade to actions/upload-artifact@v3.1.0 Upgrade to circe 0.14.3 Upgrade to http4s 1.0.0-M37 Upgrade to sbt 1.7.2 Upgrade to sbt-houserules 0.5.2 Upgrade to sbt-mdoc 2.3.6 Upgrade to sbt-scalajs 1.11.0 Upgrade to sconfig 1.5.0","title":"0.5.1"},{"location":"changelog.html#0-5-0","text":"2022-02-12\nAdd support for Scala 3 (#196) @bardurdam Update cats-effect to 3.3.5 (#192) Update http4s to 1.0.0-M31 (#194) Update mdoc to 2.3.0 (#191) Update sbt to 1.6.2 (#193) Update sbt-ci-release to 1.5.10 (#188) Update sbt-houserules to 0.3.19 (#183) Update sbt-scalajs to 1.9.0 Update scala-library to 2.13.8 (#185) Update sconfig to 1.4.9 (#190) Update slf4j-simple to 1.7.36 (#195)","title":"0.5.0"},{"location":"changelog.html#0-4-0","text":"2022-01-08\nChange organization to io.taig Migrate CI to github actions Rename master branch to main Upgrade to cats 2.7.0 Upgrade to cats-effect 3.3.3 Upgrade to http4s 1.0.0-M30 Upgrade to munit 0.7.29 Upgrade to munit-cats-effect 1.0.7 Upgrade to sbt 1.6.1 Upgrade to sbt-houserules 0.3.18 Upgrade to sbt-mdoc 2.2.24 Upgrade to sbt-scalajs 1.8.0 Upgrade to sbt-scalajs-crossproject 1.1.0 Upgrade to sbt-web-scalajs 1.2.0 Upgrade to scala 2.13.7 Upgrade to scalajs-dom 2.1.0 Upgrade to sconfig 1.4.7 Upgrade to slf4j-simple 1.7.32","title":"0.4.0"},{"location":"changelog.html#0-3-3","text":"2021-05-28\nUpdate cats-core, cats-laws to 2.6.1 (#165) Update cats-effect, cats-effect-kernel to 3.1.1 (#166) Update circe-parser to 0.14.1 (#178) Update discipline-munit to 1.0.9 (#167) Update http4s-blaze-server, http4s-dsl to 1.0.0-M23 (#179) Update mdoc, sbt-mdoc to 2.2.21 (#171) Update munit, munit-scalacheck to 0.7.26 (#164) Update munit-cats-effect-3 to 1.0.3 (#168) Update sbt to 1.5.2 (#162) Update sbt-houserules to 0.3.10 (#175) Update scala-library to 2.13.6 (#174) Update sconfig to 1.4.4 (#169) Update shapeless to 2.3.7 (#173)","title":"0.3.3"},{"location":"changelog.html#0-3-1","text":"2021-04-01\nFix broken Quantities JSON encoder Upgrade to cats-effect 3 Upgrade to discipline-munit 1.0.7 Upgrade to munit 0.7.23 Upgrade to cats 2.5.0 Upgrade to sbt-mdoc 2.2.19 Update sbt-scalajs to 1.5.1 (#146) Update sbt-ci-release to 1.5.7 (#136) Update sbt to 1.5.0-RC2 (#135)","title":"0.3.1"},{"location":"changelog.html#0-3-0","text":"2021-04-01\nRelease failed, please use 0.3.0 instead","title":"0.3.0"},{"location":"changelog.html#0-2-1","text":"2021-03-22\nPlural ranges (#107) Fix StringFormatN source generator to start at index 0 Don’t publish documentation artifacts Update cats-core, cats-laws to 2.4.2 (#120) Update cats-effect to 2.4.0 (#134) Update discipline-munit to 1.0.6 (#119) Update http4s-blaze-server, http4s-dsl to 0.21.20 (#129) Update mdoc_2.13, sbt-mdoc to 2.2.18 (#122) Update munit, munit-scalacheck to 0.7.22 (#118) Update munit-cats-effect-2 to 0.13.1 (#124) Update paradox-theme-generic, sbt-paradox to 0.9.2 (#126) Update sbt to 1.5.0-RC1 (#133) Update sbt-ci-release to 1.5.6 (#132) Update sbt-houserules to 0.3.6 (#130) Update sbt-scalajs, scalajs-compiler, … to 1.5.0 (#114) Update scala-library to 2.13.5 (#128) Update sconfig to 1.4.1 (#127) Upgrade to sbt 1.5.0-M2","title":"0.2.1"},{"location":"changelog.html#0-2-0","text":"2021-01-29\nAdd MonoidK instance for Translations Add SemigroupK instance for NonEmptyTranslations Rename Dictionaty to NonEmptyTranslations Rename Translations.toDictionary to .withFallback Streamline collection APIs Improve docs","title":"0.2.0"},{"location":"changelog.html#0-1-6","text":"2021-01-29\nGenerate StringFormatN boilerplate up to n=22 Update munit-cats-effect-2 to 0.13.0 (#106) Minor doc enhancements","title":"0.1.6"},{"location":"changelog.html#0-1-5","text":"2021-01-28\nFix StringFormat.toString to use 0-based-indices Fix plurals example in docs","title":"0.1.5"},{"location":"changelog.html#0-1-4","text":"2021-01-28\nChange StringFormat encoding to MessageFormat style Add plurals section to docs Add argument section to docs","title":"0.1.4"},{"location":"changelog.html#0-1-3","text":"2021-01-28\nCreate paradox documentation microsite Update sconfig to 1.4.0 (#104)","title":"0.1.3"},{"location":"changelog.html#0-1-2","text":"2021-01-26\nAdd cats module Improve sample app","title":"0.1.2"},{"location":"changelog.html#0-1-1","text":"2021-01-26\nAllow Option decoding for missing fields Fix DerivedDecoder giving wrong path in error message Fix hocon loader null handling Add numeric Encoder instances Add support for Option in codecs Add Dictionary and Translations.toMap Add Dictionary collection operations Improve Translations.toDictionary Add Dictionary.of Add StringFormat tests","title":"0.1.1"},{"location":"changelog.html#0-1-0","text":"2021-01-26\nDitch collection types and go all in on data classes Introduce StringFormat for String argument injection","title":"0.1.0"},{"location":"changelog.html#0-0-1","text":"2021-01-01\nInitial release","title":"0.0.1"}]}